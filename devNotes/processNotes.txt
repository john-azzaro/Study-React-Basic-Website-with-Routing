Process Notes for React website with routing
============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================
The objective of the website with routing is to explore the implementation of clientside routing.






# What is React Router?
=======================
  * Adding React Router to an application is like having pre-set stations on a television. Instead of clicking up and down to find the 
    channel you are looking for, you simply need to go straight to pre-set channel you are looking for. 


# What is a route?
==================
  * Routes in a javascript web application are like pre-set "states", or as the analogy would put it, the channels for the televsion. 
  * Users can navigate to routes directly instead of having to update the state through manual interactions with the page.
  * Routes are controlled in a React application by using the /path part of the application's URL.


# Why use routing?
==================
  * A JavaScript web application with routing would require different routes.
  * For example, if you think about the television example, WITHOUT routing requires that in order to get to channel 50, you would
    need to go through the entire journey to get to question 50. This presents a problem.
  * WITH routing, you can add an extra control for the application state: THE URL PATH!
  * For example:
      * https://my-quiz.com/             :  Shows the welcome page.
      * https://my-quiz.com/about        :  Shows the about page for the quiz.
      * https://my-quiz.com/question/1   :  Shows the first question in the quiz.
      * https://my-quiz.com/question/2   :  Shows the second question in the quiz.
  
  * The path at the end of each URL holds extra state for the JavaScript application. In doing this, you dont need a bulky index but
    instead you can use the "path" part of the address to control the current question.


  EXAMPLE OF NON-ROUTING vs ROUTING
  ==================================
  * In the example below, a pseudo-quiz that DOES NOT use routing requires many steps. The initial state is set to 0, the next question
    is its own event handler, etc.
  * What is important to take keep in mind here is that in order to get to question 3, you would have to click 3 times through the quiz
    to even get to the question. And if you wanted to go straight to question 3, you would have no way of doing that.

        ------------------------------------------------------------------------
          class QuizApp extends React.Component {
            state = {                                                                    // Initial state of the quiz is always set to the first question.
              currentQuestionIndex: 0,
            };

            goToNextQuestion = () => {                                                   // This event handler will increment the question displayed when clicked.
              this.setState({
                currentQuestionIndex: this.state.currentQuestionIndex + 1
              })
            };

            render() {                                                                   // on render...
              const { currentQuestionIndex } = this.state;                               // the initial currentQuestion will be set to the state of 0 (first question)...
              
              let comp;                                                                  // Depending on the current question, a different component will be used...
              if (currentQuestionIndex === 0) {                                          // So if the question is the first (0), then...
                comp = <QuestionOne />;                                                  // ... the "QuestionOne" component will be returned in the JSX.
              } else if (currentQuestionIndex === 1) {
                comp = <QuestionTwo />;
              } else if (currentQuestionIndex === 2) {
                comp = <QuestionThree />;
              } else if (currentQuestionIndex === 3) {
                comp = <QuestionFour />;
              }
              /* else if, etc... for more questions */
              return (
                <div>
                  {comp}
                  <button onClick={this.goToNextQuestion}>
                    Next question
                  </button>
                </div>
              )
            }
          }
        -----------------------------------------------------------------------

    * In the example below, the ReactRouter encloses each of the routes with a path prop to the question.
    * By using routing, when you open an application starting at question 10, it will go to question 10.
    * EACH COMPONENT HAS ITS OWN DEDICATED PATH.
        ------------------------------------------------------------------------
            class App extends React.Component {
              // no need for custom state!

              render() {
                return (
                  <ReactRouter>                                                      // ReactRouter...
                    <HomePageRoute path={'/'} />                                     //... with the path to each question!
                    <QuestionOneRoute path={'/question/1'} />
                    <QuestionTwoRoute path={'/question/2'} />
                    <QuestionThreeRoute path={'/question/3'} />
                    {/* ... */}
                    <QuestionSixRoute path={'/question/6'} />
                  </ReactRouter>
                )
              }
            }
        ------------------------------------------------------------------------





What is react routing?
======================
  * React Router is a library that lets us render different components depending on the URL's path. It allows us to 
    synchronize our application to the current path of our webpage.
  * React routing can: 
      * Programmatically change the /path of our page in the browser address bar without the need for a complete page load. 
        It's a state change, not a different webpage!
      * Integrate with the browser so that the "back" and "forward" buttons will work seamlessly with our routes.
      * Be driven by React Components, this is "idiomatic" to React developers; using components instead of configurations.
      * Have sophisticated routing compositions, for example, dynamic and nested routes.





How do you setup React router?
==============================
  * To setup react router, you simply need to install the react router package.
  * There are a few react router packages for different platfroms, like mobile, etc.
  * You will want the DOM version: 

                  "npm install react-router-dom"

  * Once you have the router package installed, you need to add the router to your App.
  ------------------------------------------------------------------------
      import React from 'react';
      import ReactDOM from 'react-dom';
      import { BrowserRouter } from "react-router-dom";                        // import BrowserRouter from the react-router-dom package.
      import './index.css';
      import App from './App';

      ReactDOM.render(
        <BrowserRouter>                                                        // Nest "App" inside the "BrowserRouter" component to add router capabilities.
          <App />
        </BrowserRouter>,
        document.getElementById('root')
      );
  ------------------------------------------------------------------------

  * What this does is add a "Router" component that wraps the existing App component.





How do you add routes and navigation?
=====================================
  * So suppose you want to create a borchure website with 4 seperate pages: Nav, Header, HomePage, and Footer.
  * The component tree would look something like this:
    ----------------------------------------------------------------------
      v BrowserRouter
        v Router
          v Router.Provider
            v App 
              v Nav 
                  Content
              v Header
                  Content
              v HomePage 
                  Content 
              v Footer
                  Content
    ----------------------------------------------------------------------

  ## ADD PATH AND ROUTE PROPS TO A ROUTE COMPONENT
  ================================================
  * First, you need to add "path" and "route" props to the Route component.  
  * To use a route component that will render another component when a certain path is in the URL address, you 
    need to add two props to a Route component:
      -----------------------------------------------------------------
          function myComponent() {
            return <p>This is shown when the path is /the-path </p>
          }

          <Route 
            path="/the-path"                                             // "path" prop with the URL path.
            component={myComponent}                                      // "component" prop with the component passed in.
          />
      -----------------------------------------------------------------

  


How do you create a route?
===========================

  1. Import Route component from react-router:
    --------------------------------------------------------------------
      import React, { Component } from 'react'
      import { Route } from 'react-router-dom'                           // Import Route from the react-router-dom package.  
      import HomePage from './HomePage'           
      import './App.css'

      export default class App extends Component {...}
    --------------------------------------------------------------------
  
  2. Import the Page component to your App.js file.
    --------------------------------------------------------------------
      import React, { Component } from 'react'
      import Nav from './Nav'
      import Header from './Header'
      import Footer from './Footer'
      import HomePage from './HomePage'                                  // import the page to your file.    
      import './App.css'

      export default class App extends Component {...}
    --------------------------------------------------------------------

  3.  Add your route component:
    * In this instance, our "home" component is begin replaced by a Route path with a "path" prop value pointing 
      to "/" and the component value being the HomePage component passed in from out previous step above.

    * HOWEVER, the way path works would return BOTH pages if you leave the paths as they are. Why? This is because
      both have the "/" in the path. To fix this, you need to add the word "exact" to it to make sure that for the
      route component,  we only want this EXACT component to show for this URL.
    --------------------------------------------------------------------
      export default class App extends Component {
        render() {
          return (
            <div className='App'>
              <nav>
                <Nav />
              </nav>
              <header>
                <Header />
              </header>
              <main>
                <Route exact path='/' component={HomePage} />           // Replace your HomePage component with a Route with "exact path" and component equal to the Homepage component.
              </main>
              <footer>
                <Footer />
              </footer>
            </div>
          )
        }
      }
    --------------------------------------------------------------------

  

  # How do you navigate WITHOUT a page load?
  ==========================================
    * As it stands, if you were to simply use the Route path as is, each page would trigger a FULL page reload
      everytime you clicked on a page.
    * To avoid this, you need to use the "Link" component from the react-router-dom library.
    * The "Link" component will use a browser feature (and JavaScript) to pretend to do a complete page load.
    * When you use a "Link" component instead of a standard anchor element for your page links, you will only
      update components that are being rendered even though the web address at the top is updating the path.

    1. First, import the "Link" component to your Nav.js file:
      --------------------------------------------------------------------
        import { Link} from 'react-router-dom'
      --------------------------------------------------------------------
  
    2. Replace any href anchor links with "Link" elements and "to" props that point to the correct URL.
      --------------------------------------------------------------------
        import React, { Component } from 'react'
        import { Link } from 'react-router-dom'
        import Content from './Content'
        import './Nav.css'

        export default class Nav extends Component {
          render() {
            return (
              <Content className='Nav'>
                <Link to='/'>                                                 // Replaced anchor tag with Link and "to" prop.
                  Home
                </Link>
                <Link to='/about'>
                  About
                  </Link>
                <Link to='/workouts'>
                  Workouts
                </Link>
              </Content>
            )
          }
        }
      --------------------------------------------------------------------





  How do you add a "page not found" page?
  =======================================
    * Within the route library, there is a "NotFounfPage" component that you can use to display a message
      if the user types in a wrong address.
    * You can also use the "switch" component as well, which will render only one of its child route components.
      In other words, if the first route component matches, it will render the path... if not, the only one that 
      does not have a path... the pathless NotFoundPage component. However, NotFoundPage seems to be the simplest
      way to execute this functionality.

    1. Import "NotFoundPage" to your App.js file:
      -----------------------------------------------------------------------
        import NotFoundPage from './NotFoundPage'
      -----------------------------------------------------------------------

    2. Import "Switch" with "Route" module:
      * The swtich component will render only one of its Route components. So what this does 
        is that it will only render the first component that has a match. In this case, if there
        are no matches, then ONLY the NotFoundPage will render. 
      -----------------------------------------------------------------------
        import { Route, Switch } from 'react-router-dom'
      -----------------------------------------------------------------------


    3. Wire NotFoundPage to a Route with NO PATH:
      -----------------------------------------------------------------------
         <main>
          <Route exact path='/' component={HomePage} />
          <Route path='/about' component={AboutPage} />
          <Route path='/workouts' component={WorkoutsPage} />
          <Route component={NotFoundPage} />                                    // Route with no path... will show 
        </main>
      -----------------------------------------------------------------------

    4. Wrap you components in a switch component to render ONLY ONE COMPONENT:
      -----------------------------------------------------------------------
        ...
        <main>
          <Switch>                                                              // Components wrapped in a Swtich component.
            <Route exact path='/' component={HomePage} />
            <Route path='/about' component={AboutPage} />
            <Route path='/workouts' component={WorkoutsPage} />
            <Route component={NotFoundPage} />
          </Switch>         
        </main>
        ...
      -----------------------------------------------------------------------





How do you make dynamic routes?
===============================
  >>NOTE<< This part of the study is located in another repo named "Study-React-Dynamic-Routing". If you want to see the 
           the program in all its goodness, check out the app there. I decided to keep the bulk of the study on this document
           so that it is easier to find and follow along with.


  1. Import Route library to App:
    ------------------------------------------------------------------------
      import { Route } from 'react-router-dom'
    ------------------------------------------------------------------------

  2. Use "Route" and wireup the path and component:
    ------------------------------------------------------------------------
      class App extends Component {
        render() {
          return (
            <div className='App'>
              <nav>
                <a href='/'>Poem List</a>
              </nav>
              <header>
                <h1>William Setstatespear</h1>
              </header>
              <main>
                <Route                                                            // Route with...
                  exact path='/'                                                  // exact path (since you want to just have this when you see the PoemListPage)
                  component={PoemListPage}                                        // and link the PoemListPage component.
                />
              </main>
              <footer>
                <p>© WilliamSetstatespear, 2018. All Rights Reserved.</p>
              </footer>
            </div>
          );
        }
      }
    ------------------------------------------------------------------------

    3. In PoemListPage, note the mapping over each poem in storage.
    -------------------------------------------------------------------------
      export default function PoemListPage() {
        return (
          <>
            <p>Choose a poem from the list below.</p>
            <ul className='PoemList'>
              {POEMS.map(poem =>                                               // In poemListPage, we map over each peom to create li instances.
                <li key={poem.id}>
                  <a href={`/poem/${poem.id}`}>                                // each li instance has an created anchor element with a dynamic href.
                    {poem.title}
                  </a>
                </li>
              )}
            </ul>
          </>
        )
      }
    -------------------------------------------------------------------------

     
    4. Make a dynamic path with route param
        * React router supports dynamic path parameters for this purpose, we can make part of our path dynamic. 
        * You can think about dynamic paths in a way similar to inserting a variable in part of the path. 
        * To define part of the path as dynamic, we prefix that part with a colon.
        * For example, with the following Route:

                    <Route path='/fixed/:dynamic' />

        * The /fixed part of the URL is static and the :dynamic part is dynamic because it's prefixed with a colon, :. 
        * The dynamic part is called a route parameter.
        * The following paths would all match for the above Route example and populate the dynamic variable appropriately.
            * /fixed/foo, would match with route parameters { dynamic: 'foo' }
            * /fixed/bar, would match with route parameters { dynamic: 'bar' }
            * /fixed/123, would match with route parameters { dynamic: '123' }
            * /fixed, wouldn't match
            * /something-else/foo, wouldn't match
      --------------------------------------------------------------
        ...
        ...
        <main>
          <Route
            exact path='/'
            component={PoemListPage}
          />
          <Route                                           
            path='/poem/:poemId'                                     // This added a dynamic path... the /poem part is fixed and the /:poemId us dynamic with a route param called poemId
            component={poemPage}                                     // and the component will be the PoemPage (but will now be the specific poem set by poemId)
          />
        </main>
        ...
        ...
      ---------------------------------------------------------------
      




How do you use Link Components with dynamic routing?
====================================================
  * For Link components (which we want to do to skip the full page load), all we need to do is import
    the Link portion of the library in and then convert an anchor tags to Link elements.
  * Again, this is so that the experience is a little smoother for the user and full page loads do not happen.

  1. Import the Link component library
    ---------------------------------------------------------------------
      import { Route, Link } from 'react-router-dom'                          // this is added via destructuring.
    ---------------------------------------------------------------------

  2. Replace any anchor tags with Link elements:
    ---------------------------------------------------------------------
        <nav>
          <Link to='/'>Poem List</Link>                                     // Link replaces anchor elements.
        </nav>
    ---------------------------------------------------------------------

  3. And then replace any href elements with Links in associated pages:
    ----------------------------------------------------------------------
        export default function PoemListPage() {
          return (
            <>
              <p>Choose a poem from the list below.</p>
              <ul className='PoemList'>
                {POEMS.map(poem =>
                  <li key={poem.id}>
                    <Link to={`/poem/${poem.id}`}>                          // Link replaces anchor elements
                      {poem.title}
                    </Link>
                  </li>
                )}
              </ul>
            </>
          )
        }
    ----------------------------------------------------------------------



  

What is programatic navigation?
===============================
  * For times when you need to navigate to another route programmatically, which means you nee dyour JavaScript
    code to send the user to another route, you'll need to think differently about routes.
  * Some of the times you might need to do this is when:
    * After a user submits a login-form. Only if the submission is successful, redirect the user to the homepage.
    * After filling out a form that adds a new item to a list, redirect the user back to the list.
    * After clicking a link, depending on the type of user, you might want to navigate to a different route.




What is History for routes?
===========================